<?xml version="1.0"?>
<project>

  <!-- Include ant-contrib -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${jo.basedir}/ant/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <!-- Set common properties to their default values -->
  <property name="lib.dir" value="lib"/>
  <property name="src.dir" value="src"/>
  <property name="build.dir" value="build"/>
  <property name="classes.dir" value="${build.dir}/classes"/>
  <property name="jo.lib.dir" value="${jo.basedir}/jars"/>
  <property name="install.dir" value="${jo.lib.dir}/javaoctave"/>

  <!-- Ant help -->
  <target name="ant_help" description="Help on how to write ant files">
    <echo>
Common properties:  - (with default values)
  lib.dir           - lib
  src.dir           - src
  build.dir         - build
  classes.dir       - $${build.dir}/classes
  jar.name          - [undefined]
  jo.lib.dir        - $${jo.basedir}/jars
  install.dir       - $${jo.lib.dir}/javaoctave
  test.project      - [undefined]

Common fileset refids:
  filesetid.lib.jars        - Files in $${lib.dir}/*/*.jar

Common path refids:
  pathid.lib.jars           - Files in fileset filesetid.lib.jars
  pathid.jar.and.lib.jars   - $${jar.name} and pathid.lib.jars

Common targets:
  clean
  build
  jar
  test
  install
    </echo>
  </target>

  <!-- Filesets -->
  <fileset id="filesetid.lib.jars" dir="${lib.dir}" includes="*/*.jar"/>

  <!-- Path refids -->
  <path id="pathid.lib.jars">
    <fileset refid="filesetid.lib.jars"/>
  </path>
  <path id="pathid.jar.and.lib.jars">
    <pathelement location="${jar.name}"/>
    <path refid="pathid.lib.jars"/>
  </path>

  <!-- Clean -->
  <target name="clean" description="Clean what was build">
    <delete dir="${build.dir}"/>
    <if>
      <isset property="jar.name"/>
      <then>
        <delete file="${jar.name}"/>
      </then>
    </if>
  </target>

  <!-- Build -->
  <target name="build" description="Build sources">
    <mkdir dir="${classes.dir}"/>
    <!-- The 'depend' target analyzes all class files and deletes those class files that depend on outdated class files -->
    <depend srcdir="${src.dir}" destdir="${classes.dir}" dump="true">
      <classpath refid="pathid.lib.jars"/>
    </depend>
    <javac destdir="${classes.dir}" debug="true" includeAntRuntime="false" source="1.5" target="1.5">
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-path,-serial"/>
      <src path="${src.dir}"/>
      <classpath refid="pathid.lib.jars"/>
    </javac>
  </target>

  <!-- Jar -->
  <target name="jar" depends="build" description="Build jar file">
    <if>
      <not>
        <isset property="jar.name"/>
      </not>
      <then>
        <fail message="Set $${jar.name} if you want to use 'jar' target"/>
      </then>
    </if>
    <jar destfile="${jar.name}">
      <fileset dir="${classes.dir}"/>
      <fileset dir="${src.dir}"/>
    </jar>
  </target>

  <!-- Unit tests with coverage report -->
  <target name="test" depends="_test_report" description="Run unit tests and create coverage report"/>
  <target name="_test_init">
    <if>
      <not>
        <isset property="test.project"/>
      </not>
      <then>
        <fail message="Set $${test.project} if you want to use 'test' target"/>
      </then>
    </if>
    <!-- Load cobertura-instrument task -->
    <taskdef classpath="${jo.lib.dir}/cobertura/cobertura.jar" resource="tasks.properties">
      <classpath>
        <fileset dir="${jo.lib.dir}/cobertura" includes="*.jar"/>
        <fileset dir="${jo.lib.dir}/log4j" includes="*.jar"/>
      </classpath>
    </taskdef>
    <!-- Properties -->
    <property name="cobertura.instrument.dir" value="${build.dir}/cobertura/instrument"/>
    <property name="cobertura.ser.file" value="${build.dir}/cobertura/cobertura.ser"/>
    <property name="cobertura.report.dir" value="${build.dir}/cobertura/report"/>
    <property name="test.jar.name" value="${test.project}.jar"/>
    <property name="test.src.dir" value="${jo.basedir}/${test.project}/src"/>
  </target>
  <target name="_test_instrument" depends="_test_init">
    <dependset>
      <!-- ${lib.dir}/javaoctave is where we install project jars -->
      <srcfilelist    dir="${lib.dir}/javaoctave"       files="${test.jar.name}"/>
      <targetfilelist dir="${cobertura.instrument.dir}" files="${test.jar.name}"/>
    </dependset>
    <if>
      <not>
        <available file="${cobertura.instrument.dir}/${test.jar.name}"/>
      </not>
      <then>
        <!-- Create instrumented classes that report coverage to the file cobertura.ser -->
        <mkdir dir="${cobertura.instrument.dir}"/>
        <cobertura-instrument todir="${cobertura.instrument.dir}" datafile="${cobertura.ser.file}">
          <fileset dir="${lib.dir}/javaoctave" includes="${test.jar.name}"/>
        </cobertura-instrument>
      </then>
    </if>
  </target>
  <target name="_test_run" depends="_test_instrument,build">
    <dependset>
      <srcfilelist dir="${cobertura.instrument.dir}" files="${test.jar.name}"/>
      <srcfileset dir="${classes.dir}"/>
      <srcfileset refid="filesetid.lib.jars"/>
      <srcfileset dir="${jo.lib.dir}/cobertura" includes="*.jar"/>
      <targetfilelist dir="${build.dir}" files="_test_run.stamp"/>
    </dependset>
    <if>
      <not>
        <available file="${build.dir}/_test_run.stamp"/>
      </not>
      <then>
        <!-- Run all junit tests using the instrumented source classes -->
        <junit fork="yes" forkmode="once">
          <assertions> <enable/> </assertions>
          <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser.file}"/>
          <classpath>
            <fileset dir="${cobertura.instrument.dir}" includes="*.jar"/>
            <pathelement location="${classes.dir}"/>
            <pathelement location="${src.dir}"/>
            <path refid="pathid.lib.jars"/>
            <fileset dir="${jo.lib.dir}/cobertura" includes="*.jar"/>
          </classpath>
          <batchtest errorproperty="testbroken" failureproperty="testbroken">
            <fileset dir="${classes.dir}">
              <include name="**/Test*.class"/>
              <exclude name="**/*$*.class"/>
            </fileset>
          </batchtest>
          <formatter type="brief" usefile="false"/>
        </junit>
        <fail if="testbroken" message="Tests failed"/>
        <touch file="${build.dir}/_test_run.stamp"/>
      </then>
    </if>
  </target>
  <target name="_test_report" depends="_test_init,_test_run">
    <dependset>
      <srcfilelist dir="${build.dir}" files="_test_run.stamp"/>
      <targetfilelist dir="${build.dir}" files="_test_report.stamp"/>
    </dependset>
    <if>
      <not>
        <available file="${build.dir}/_test_report.stamp"/>
      </not>
      <then>
        <!-- Delete and recreate the dir in which the HTML report is output -->
        <delete dir="${cobertura.report.dir}"/>
        <mkdir dir="${cobertura.report.dir}"/>
        <!-- Create HTML report  -->
        <cobertura-report srcdir="${test.src.dir}" destdir="${cobertura.report.dir}" datafile="${cobertura.ser.file}"/>
        <touch file="${build.dir}/_test_report.stamp"/>
      </then>
    </if>
  </target>

  <!-- Install -->
  <target name="install" depends="jar" description="Install jar file in ${install.dir}">
    <copy file="${jar.name}" todir="${install.dir}"/>
  </target>

</project>
